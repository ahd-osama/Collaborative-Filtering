# -*- coding: utf-8 -*-
"""evaluation.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JbspROM479DuN9Z4jC7RoXNJ28HnXbJa
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

def create_train_test(ratings, test_fraction=0.2, seed=42):
    np.random.seed(seed)
    train = ratings.copy()
    test = []

    for user in ratings.index:
        rated_items = ratings.loc[user][ratings.loc[user] > 0].index.tolist()
        if len(rated_items) < 2:
            continue
        test_items = np.random.choice(rated_items, size=int(len(rated_items) * test_fraction), replace=False)
        for item in test_items:
            test.append((user, item, ratings.loc[user, item]))
            train.loc[user, item] = 0
    return train, test

def rmse(recommender, test_data, k=100):
    from collections import defaultdict
    user_recs = {}

    for user, _, _ in test_data:
        if user not in user_recs:
            recs = recommender.recommend(user, top_n=k)
            user_recs[user] = set(recs) if recs else set()

    errors = []
    for user, movie, true_rating in test_data:
        if movie in user_recs.get(user, set()):
            predicted_rating = 5
            errors.append((true_rating - predicted_rating) ** 2)

    return np.sqrt(np.mean(errors)) if errors else float('nan')

def precision_recall(recommender, test_data, k=5):
    from collections import defaultdict
    test_dict = defaultdict(list)
    for user, movie, _ in test_data:
        test_dict[user].append(movie)

    hits = 0
    total_recommended = 0
    total_relevant = 0

    for user in test_dict:
        recs = recommender.recommend(user, top_n=k)
        if not recs:
            continue
        test_items = set(test_dict[user])
        hit_count = sum(1 for movie in recs if movie in test_items)

        hits += hit_count
        total_recommended += len(recs)
        total_relevant += len(test_items)

    precision = hits / total_recommended if total_recommended else float('nan')
    recall = hits / total_relevant if total_relevant else float('nan')
    return precision, recall