# -*- coding: utf-8 -*-
"""recommender.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lr0dUQUFQgkact6HYAMiwzjQeNdVgOOM
"""

class MovieRecommenderUserBased:
  def __init__(self, user_ratings, similarity_matrix):
    self.user_ratings = user_ratings
    self.similarity_matrix = similarity_matrix

  def recommend(self, user_id, top_n=5):
    similar_users = self.similarity_matrix[user_id].sort_values(ascending=False)[1:6]
    weighted_scores = self.user_ratings.loc[similar_users.index].T.dot(similar_users)

    recommendations = weighted_scores.sort_values(ascending=False)

    user_seen = set(self.user_ratings.loc[user_id][self.user_ratings.loc[user_id] > 0].index)
    recommendations = [movie for movie in recommendations.index if movie not in user_seen]

    return recommendations[:top_n]

class MovieRecommenderItemBased:
    def __init__(self, item_ratings, similarity_matrix):
        self.item_ratings = item_ratings
        self.similarity_matrix = similarity_matrix

    def recommend(self, user_id, top_n=5):
        user_ratings = self.item_ratings.loc[user_id]

        unseen_movies = user_ratings[user_ratings == 0].index

        movie_scores = {}

        for movie in unseen_movies:
            similarity_scores = self.similarity_matrix[movie]

            user_ratings_for_similar_movies = user_ratings

            weighted_score = sum(user_ratings_for_similar_movies * similarity_scores)

            movie_scores[movie] = weighted_score

        recommended_movies = sorted(movie_scores, key=movie_scores.get, reverse=True)[:top_n]

        return recommended_movies